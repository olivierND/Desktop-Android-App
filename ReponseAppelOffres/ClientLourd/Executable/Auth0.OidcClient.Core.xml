<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Auth0.OidcClient.Core</name>
    </assembly>
    <members>
        <member name="T:Auth0.OidcClient.Auth0ClientBase">
            <summary>
            Base class for performing authentication and authorization operations with Auth0 using the
            underlying <see cref="T:IdentityModel.OidcClient.OidcClient"/>.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.#ctor(Auth0.OidcClient.Auth0ClientOptions,System.String)">
            <summary>
            Creates a new instance of the Auth0 OIDC Client.
            </summary>
            <param name="options">The <see cref="T:Auth0.OidcClient.Auth0ClientOptions"/> specifying the configuration for the Auth0 OIDC Client.</param>
            <param name="platformName">The platform name that forms part of the user-agent when communicating with Auth0 servers.</param>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.LoginAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.LogoutAsync">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.LogoutAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.PrepareLoginAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.RefreshTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.RefreshTokenAsync(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.GetUserInfoAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Auth0.OidcClient.Auth0ClientOptions">
            <summary>
            Specifies the options for an instance of the <see cref="!:Auth0Client"/> class.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Browser">
            <summary>
            The <see cref="T:IdentityModel.OidcClient.Browser.IBrowser"/> implementation responsible for displaying the Auth0 Login screen. Leave this
            unassigned to accept the recommended implementation for platform.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.ClientId">
            <summary>
            Your Auth0 Client ID.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.ClientSecret">
            <summary>
            Your Auth0 Client Secret.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Domain">
            <summary>
            Your Auth0 tenant domain.
            </summary>
            <remarks>
            e.g. tenant.auth0.com
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.EnableTelemetry">
            <summary>
            Indicates whether basic telemetry information should be included with requests to Auth0.
            </summary>
            <remarks>
            The telemetry information is like a browser user agent and includes operating system
            details only to let Auth0 guide engineering resources based on platform popularity.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.LoadProfile">
            <summary>
            Indicates whether the user profile should be loaded from the /userinfo endpoint.
            </summary>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Scope">
            <summary>
            The scopes you want to request.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.RefreshTokenMessageHandler">
            <summary>
            Allow overriding the RetryMessageHandler.
            </summary>
            <example>
            var handler = new HttpClientHandler();
            var options = new Auth0ClientOptions
            {
               RefreshTokenMessageHandler = handler
            };
            </example>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.BackchannelHandler">
            <summary>
            Allow overriding the BackchannelHandler.
            </summary>
            <example>
            var handler = new HttpClientHandler();
            var options = new Auth0ClientOptions
            {
               BackchannelHandler = handler
            };
            </example>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.PostLogoutRedirectUri">
            <summary>
            Override the Redirect URI used to return from logout.
            </summary>
            <remarks>
            This should only be done in exceptional circumstances.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.RedirectUri">
            <summary>
            Override the the Redirect URI used to return from login.
            </summary>
            <remarks>
            This should only be done in exceptional circumstances
            </remarks>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientOptions.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Auth0.OidcClient.Auth0ClientOptions"/> class used to configure the options for
            passing to the constructor of <see cref="!:Auth0Client"/>.
            </summary>
        </member>
        <member name="T:Auth0.OidcClient.IAuth0Client">
            <summary>
            Interface for performing authentication and authorization operations with Auth0 using the
            underlying <see cref="T:IdentityModel.OidcClient.OidcClient"/>.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.LoginAsync(System.Object)">
            <summary>
            Launches a browser to log the user in.
            </summary>
            <param name="extraParameters">Any extra parameters that need to be passed to the authorization endpoint.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.LoginResult"/> containing the tokens and claims.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.LogoutAsync">
            <summary>
            Launches a browser to log the user out and clear the Auth0 SSO Cookie.
            </summary>
            <returns>A <see cref="T:IdentityModel.OidcClient.Browser.BrowserResultType"/> indicating whether the logout was successful.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.LogoutAsync(System.Boolean)">
            <summary>
            Launches a browser to log the user out and clear the Auth0 SSO Cookie.
            </summary>
            <param name="federated">Whether to log the user out of their federated identity provider.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Browser.BrowserResultType"/> indicating whether the logout was successful.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.PrepareLoginAsync(System.Object)">
            <summary>
            Generates an <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> containing the URL, state, nonce and code challenge which can
            be used to redirect the user to the authorization URL, and subsequently process any response by calling
            the <see cref="M:Auth0.OidcClient.IAuth0Client.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState)"/> method.
            </summary>
            <param name="extraParameters">Additional parameters to send to the login endpoint.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> with necessary URLs, nonce, state and code verifiers.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState)">
            <summary>
            Process the response from the Auth0 redirect URI.
            </summary>
            <param name="data">The data containing the full redirect URI.</param>
            <param name="state">The <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> which was generated when the <see cref="M:Auth0.OidcClient.IAuth0Client.PrepareLoginAsync(System.Object)"/>
            method was called.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.LoginResult"/> containing the tokens and claims.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.RefreshTokenAsync(System.String)">
            <summary>
            Generates a new set of tokens based on a refresh token. 
            </summary>
            <param name="refreshToken">The refresh token which was issued during the authorization flow, or subsequent
            calls to <see cref="M:IdentityModel.OidcClient.OidcClient.RefreshTokenAsync(System.String,System.Object)"/>.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.RefreshTokenResult"/> with the refreshed tokens.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.RefreshTokenAsync(System.String,System.Object)">
            <summary>
            Generates a new set of tokens based on a refresh token. 
            </summary>
            <param name="refreshToken">The refresh token which was issued during the authorization flow, or subsequent
            calls to <see cref="M:IdentityModel.OidcClient.OidcClient.RefreshTokenAsync(System.String,System.Object)"/>.</param>
            <param name="extraParameters">Additional parameters to send to the refresh endpoint.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.RefreshTokenResult"/> with the refreshed tokens.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.GetUserInfoAsync(System.String)">
            <summary>
            Gets the user claims from the userinfo endpoint.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.UserInfoResult"/> with the user information and claims.</returns>
            </returns>
            <exception cref="!:ArgumentNullException">accessToken</exception>
            <exception cref="!:InvalidOperationException">No userinfo endpoint specified</exception>
        </member>
    </members>
</doc>
